name: branch-deploy

'on':
  issue_comment:
    types: [created]

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
      contents: write
      checks: write
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.deploy')}}

    steps:
      - name: checkout to main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: validate environment
        id: validate-environment
        run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
        env:
          COMMENT_BODY: ${{github.event.comment.body}}

      - name: branch-deploy
        id: branch-deploy
        uses: github/branch-deploy@v8.0.0
        with:
          environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
          trigger: '.deploy'
          sticky_locks: "true"
          update_branch: disabled
          skip_reviews: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}

      - name: update target revision
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ./.github/scripts/branch-deploy.sh -a "update-target-revision"
        env:
          T_ENV_APP: ${{steps.branch-deploy.outputs.environment}}
          T_BRANCH: ${{steps.branch-deploy.outputs.ref}}

      - name: temp branch commit
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: commit
        with:
          branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
          create_branch: true
          commit_message: "[skip ci] branch-deploy lock/deploy ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}"
          file_pattern: '*/applications/*/kustomization.yaml'

      - name: Report status check
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_checks = "${{ vars.GIT_STATUS_CHECKS }}".split(",")
            for (pr_check of pr_checks) {
            console.log(pr_check);
            github.checks.create({
              name: pr_check,
              head_sha: '${{ steps.commit.outputs.commit_hash }}',
              status: 'completed',
              conclusion: 'success',
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            }

      - name: temp branch merge
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        run: |
          git checkout main
          git pull
          git merge "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp" --squash
          git push

        # uses: devmasx/merge-branch@master
        # with:
        #   type: now
        #   from_branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
        #   target_branch: main
        #   message: "[skip ci] deploy ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}"
        #   github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: cleanup temp branch
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        run: ./.github/scripts/branch-deploy.sh -a "cleanup"
        env:
          T_ENV_APP: ${{steps.branch-deploy.outputs.environment}}

      - name: checkout to lock branch
        uses: actions/checkout@v3
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        with:
          ref: ${{steps.branch-deploy.outputs.environment}}-branch-deploy-lock

      - name: update lock json
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ./.github/scripts/branch-deploy.sh -a "update-lock-json"
        env:
          COMMENT_URL: ${{github.event.comment.html_url}}
          T_BRANCH: ${{steps.branch-deploy.outputs.ref}}


  unlock:
    name: unlock
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
      contents: write
      checks: write
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.unlock') }}
    steps:
    - name: checkout to main
      uses: actions/checkout@v3
      with:
        ref: main

    - name: validate environment
      id: validate-environment
      run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
      env:
        COMMENT_BODY: ${{github.event.comment.body}}

    - name: branch-unlock
      id: branch-unlock
      uses: github/branch-deploy@v8.0.0
      with:
        environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
        trigger: '.deploy'
        sticky_locks: "true"

    - name: unlock-action
      run: ./.github/scripts/branch-deploy.sh -a "unlock-action"
      env:
        T_ENV_APP: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}

    - name: temp branch commit
      uses: stefanzweifel/git-auto-commit-action@v5
      id: commit
      with:
        branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
        create_branch: true
        commit_message: "[skip ci] branch-deploy unlock ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}"
        file_pattern: '*/applications/*/kustomization.yaml'

    - name: Report tests check
      if: steps.commit.outputs.commit_hash != ''
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            const pr_checks = "${{ vars.GIT_STATUS_CHECKS }}".split(",")
            for (pr_check of pr_checks) {
            console.log(pr_check);
            github.checks.create({
              name: pr_check,
              head_sha: '${{ steps.commit.outputs.commit_hash }}',
              status: 'completed',
              conclusion: 'success',
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            }

    - name: temp branch merge
      if: steps.commit.outputs.commit_hash != ''
      uses: devmasx/merge-branch@master
      with:
        type: now
        from_branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
        target_branch: main
        message: "[skip ci] unlock ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}"
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: cleanup temp branch
      if: steps.commit.outputs.commit_hash != ''
      run: ./.github/scripts/branch-deploy.sh -a "cleanup"
      env:
        T_ENV_APP: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}




  lock-info:
    name: lock-info
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
      contents: none
      checks: none
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.lock') && contains(github.event.comment.body, '--info') }}
    steps:
      - name: checkout to main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: validate environment
        id: validate-environment
        run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
        env:
          COMMENT_BODY: ${{github.event.comment.body}}

      - name: lock-info
        id: lock-info
        uses: github/branch-deploy@v8.0.0
        with:
          environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
          trigger: '.deploy'
          sticky_locks: "true"

  auto-review:
    name: auto-review
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      deployments: write
      contents: read
      checks: none
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.auto-review') }}
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: gh cli
      run: ./.github/scripts/branch-deploy.sh -a "gh-cli"

    - name: Get branch
      id: 'get_branch'
      env:
        REPO: ${{ github.repository }}
        PR_NO: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: echo "branch=$(gh pr view $PR_NO --repo $REPO --json headRefName --jq '.headRefName')" >> "$GITHUB_OUTPUT"

    - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
      id: filter
      with:
        base: main
        ref: ${{ steps.get_branch.outputs.branch }} # your feature branch
        filters: |
            all-dev:
              - 'dev/**'
            not-all-dev:
              - '!dev/**'

    - name: Auto approve for dashboard
      if: ${{ steps.filter.outputs.all-dev == 'true' && steps.filter.outputs.not-all-dev  == 'false' }}
      uses: hmarr/auto-approve-action@44888193675f29a83e04faf4002fa8c0b537b1e4
      with:
        pull-request-number: ${{ github.event.issue.number }}

    - name: PR comment on auto-approve rejection
      uses: actions/github-script@v6
      with:
        script: |
          if ("${{steps.filter.outputs.not-all-dev}}" == "false") 
          {
           reaction = '+1'
          }
          else
          {
            reaction = '-1'
          }
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: "${{github.event.comment.id}}",
            content: reaction,
          })

