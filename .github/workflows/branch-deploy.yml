name: branch-deploy

'on':
  issue_comment:
    types: [created]

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: write

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.deploy')}}

    steps:
      - name: checkout to main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: validate environment
        id: validate-environment
        run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
        env:
          COMMENT_BODY: ${{github.event.comment.body}}

      - name: branch-deploy
        id: branch-deploy
        uses: github/branch-deploy@v8.0.0
        with:
          environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
          trigger: '.deploy'
          sticky_locks: "true"
          update_branch: disabled
          skip_reviews: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}

      - name: update target revision
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ./.github/scripts/branch-deploy.sh -a "update-target-revision"
        env:
          T_ENV_APP: ${{steps.branch-deploy.outputs.environment}}
          T_BRANCH: ${{steps.branch-deploy.outputs.ref}}

      - name: temp branch commit
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: commit
        with:
          branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
          create_branch: true

      - name: Report status check
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.checks.create({
              name: 'status-check-temp',
              head_sha: '${{ steps.commit.outputs.commit_hash }}',
              status: 'completed',
              conclusion: 'success',
              owner: context.repo.owner,
              repo: context.repo.repo
            })

      - name: temp branch merge
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
          target_branch: main
          message: '[skip ci] merge'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: cleanup temp branch
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.commit.outputs.commit_hash != '' }}
        run: ./.github/scripts/branch-deploy.sh -a "cleanup"
        env:
          T_ENV_APP: ${{steps.branch-deploy.outputs.environment}}

      - name: checkout to lock branch
        uses: actions/checkout@v3
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        with:
          ref: ${{steps.branch-deploy.outputs.environment}}-branch-deploy-lock

      - name: update lock json
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        run: ./.github/scripts/branch-deploy.sh -a "update-lock-json"
        env:
          COMMENT_URL: ${{github.event.comment.html_url}}
          T_BRANCH: ${{steps.branch-deploy.outputs.ref}}


  unlock:
    name: unlock
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '.unlock') }}
    steps:
    - name: checkout to main
      uses: actions/checkout@v3
      with:
        ref: main

    - name: validate environment
      id: validate-environment
      run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
      env:
        COMMENT_BODY: ${{github.event.comment.body}}

    - name: branch-unlock
      id: branch-unlock
      uses: github/branch-deploy@v8.0.0
      with:
        environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
        trigger: '.deploy'
        sticky_locks: "true"

    - name: unlock-action
      run: ./.github/scripts/branch-deploy.sh -a "unlock-action"
      env:
        T_ENV_APP: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}

    - name: temp branch commit
      uses: stefanzweifel/git-auto-commit-action@v5
      id: commit
      with:
        branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
        create_branch: true

    - name: Report tests check
      if: steps.commit.outputs.commit_hash != ''
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.checks.create({
            name: 'status-check-temp',
            head_sha: '${{ steps.commit.outputs.commit_hash }}',
            status: 'completed',
            conclusion: 'success',
            owner: context.repo.owner,
            repo: context.repo.repo
          })

    - name: temp branch merge
      if: steps.commit.outputs.commit_hash != ''
      uses: devmasx/merge-branch@master
      with:
        type: now
        from_branch: "${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}-merge-temp"
        target_branch: main
        message: '[skip ci] merge'
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: cleanup temp branch
      if: steps.commit.outputs.commit_hash != ''
      run: ./.github/scripts/branch-deploy.sh -a "cleanup"
      env:
        T_ENV_APP: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}




  lock-info:
    name: lock-info
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.comment.body, '.lock') && contains(github.event.comment.body, '--info') }}
    steps:
      - name: checkout to main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: validate environment
        id: validate-environment
        run: ./.github/scripts/branch-deploy.sh -a "validate-environment"
        env:
          COMMENT_BODY: ${{github.event.comment.body}}

      - name: lock-info
        id: lock-info
        uses: github/branch-deploy@v8.0.0
        with:
          environment_targets: ${{steps.validate-environment.outputs.GITHUB_TARGET_ENV}}
          trigger: '.deploy'
          sticky_locks: "true"
